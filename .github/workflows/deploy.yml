name: Deploy Catalyst9

on:
  push:
    branches: [main, production]
    tags:
      - 'v*'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: docker.io
  IMAGE_NAME: catalyst9/api

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: projects/knowledge-graph-system/go.sum

      - name: Run tests
        run: |
          cd projects/knowledge-graph-system
          go mod download
          go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: projects/knowledge-graph-system/coverage.out

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to k3s
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: ${{ github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/v') && 'production' || 'development' }}
      url: ${{ github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/v') && 'https://catalyst9.ai' || 'https://dev.catalyst9.ai' }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > ~/.kube/config

      - name: Update Kubernetes deployment
        run: |
          # Determine the image tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            TAG="production-${{ github.sha }}"
          else
            TAG="main-${{ github.sha }}"
          fi

          # Update the deployment
          kubectl set image deployment/catalyst9-api \
            catalyst9-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG} \
            -n catalyst9

          # Wait for rollout
          kubectl rollout status deployment/catalyst9-api -n catalyst9 --timeout=5m

      - name: Verify deployment
        run: |
          # Get the service endpoint
          SERVICE_IP=$(kubectl get svc catalyst9-api -n catalyst9 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || \
                       kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="ExternalIP")].address}' 2>/dev/null || \
                       echo "localhost")

          # Test health endpoint
          curl -f http://${SERVICE_IP}/health || exit 1

      - name: Update DNS (if production)
        if: github.ref == 'refs/heads/production' || startsWith(github.ref, 'refs/tags/v')
        run: |
          # Trigger DNS update via SSH
          ssh ${{ secrets.SSH_HOST }} "/opt/catalyst9/deploy/dns/ddns-updater.sh --once"

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    steps:
      - name: Send notification
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            STATUS="✅ Deployment successful"
            COLOR="good"
          else
            STATUS="❌ Deployment failed"
            COLOR="danger"
          fi

          if [[ -n "$WEBHOOK_URL" ]]; then
            curl -X POST $WEBHOOK_URL \
              -H 'Content-Type: application/json' \
              -d "{
                \"attachments\": [{
                  \"color\": \"$COLOR\",
                  \"title\": \"Catalyst9 Deployment\",
                  \"text\": \"$STATUS\",
                  \"fields\": [
                    {
                      \"title\": \"Branch\",
                      \"value\": \"${{ github.ref_name }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Commit\",
                      \"value\": \"${{ github.sha }}\",
                      \"short\": true
                    }
                  ]
                }]
              }"
          fi